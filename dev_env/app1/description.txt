https://youtu.be/w-ITLbRfhnA



--------------------------------------
1.Встановлюємо віртуальне оточення

D:\GitHub\Lessons_2-Django-from-Python-Hub-Studio\dev_env>python -m venv venv



2.Активуємо віртуальне оточення

D:\GitHub\Lessons_2-Django-from-Python-Hub-Studio\dev_env>venv\Scripts\activate




3.Встановлюємо django 4.2.11

(venv) D:\GitHub\Lessons_2-Django-from-Python-Hub-Studio\dev_env>pip install django==4.2.11



4. django-admin

(venv) D:\GitHub\Lessons_2-Django-from-Python-Hub-Studio\dev_env>django-admin


5.Створення проекту
(venv) D:\GitHub\Lessons_2-Django-from-Python-Hub-Studio\dev_env>django-admin startproject app


6. Утиліта manage.py

(venv) D:\GitHub\Lessons_2-Django-from-Python-Hub-Studio\dev_env\app1>python manage.py


7. Запуск сервера django

(venv) D:\GitHub\Lessons_2-Django-from-Python-Hub-Studio\dev_env\app1>python manage.py runserver

8. Створення  сценарія debug  для django ->  запуск сервера ->       ctrl + F5

9.Створюємо додаток main
(venv) D:\GitHub\Lessons_2-Django-from-Python-Hub-Studio\dev_env\app1>python mange.py startapp main

10. Реєструємо додаток main в налаштуваннях :  app-> settings.py -> INSTALLED_APPS

11. Шаблонний тег

{% load static %}  -  на початку HTML кода

12. STATICFILES_DIRS - Уніфікація доступу до статичних файлів
    
    видаляємо імпорт 
    
    from django.conf.global_settings import STATICFILES_DIRS

    STATICFILES_DIRS = [
        BASE_DIR / 'static'
        ]

13. block - base.html - винесення в окремий файл коду, що повторюється

14. {% extends "main/base.html" %} - звертаємось до базоввої розмітки        

15. url - <a class="navbar-brand" href="{% url "" %}">Home</a>


Файл html -> block- > controler in views.py - > urls.py in goods -> urls.py in app -> linc in base.html

16. Terminal -> New Terminal -> manage.py ->  migrate ( застосувати всі міграції, що не були застосовані) - створюємо таблиці, що передбачені django за замовчуванням
    

    makemigrations - створити міграції на основі модулів (поле "id" створюється автоматично)

17. База данних ORM

goods -> models.py

створюємо таблиці

18. Рефакторинг таблиць - 
    1 - видаляємо файл бази данних.
    2 - запускаємо сервер (ctrl + F5)

    django сам створює міграції та пропоную нам створити з них таблиці (ті що в пакеті django)

    3 - manage.py makemigrations - створюємо міграції
    4 - manage.py migrate - створюємо таблиці на основі міграцій

    
19. Посилання на адмін панель 
    
    href="{% url "admin:index" %}"

20. Створюємо користувача 

    manage.py createsuperuser
    name = root
    email_adress = Null
    password = root (символи не з'являються) - два рази
    Підтверджуємо рівень складності пароля

21. Реєструємо таблицю користувачів в admin.py

from goods.models import Categories

admin.site.register(Categories)

22. Зміна мови користування адмінпанелі
app-> settings-> 

LANGUAGE_CODE = 'en-us'

    змінюємо на

LANGUAGE_CODE = 'uk'

23.
    apps.py
    verbose_name = 'Товари'

24. pip install Pillow    

25. manage.py shell 

InteactiveConsole
------------------------------------------------------
>>> from goods.models import Categories
>>> x = Categories()  
>>> x.name = 'Oфіс' 
>>> x
<Categories: Categories object (None)>
>>> x.save()
>>> x
<Categories: Categories object (1)>
>>> x.name
'Oфіс'
>>>
-------------------------------------------------------

26. pip install ipython
    manage.py shell



27. objects

Створюємо запис :
    Categories.objects.create(name='Кухня', slug='kuhnya') 

Вибираємо всі записи :
    x= Categories.objects.all()

    x.filter(id=4)

28. fixture

    manage.py

        dumpdata - Резервна копія таблиці  бази данних
        loaddata - Завантаження в таблицю бази данних з резервної копії 

    (venv) D:\GitHub\Lessons_2-Django-from-Python-Hub-Studio\dev_env\app1>manage.py dumpdata goods.Categories > fixtures/goods/cats.json    

    manage.py dumpdata goods.Products > fixtures/goods/prod.json 

    manage.py makemigrations
    manage.py migrate
    manage.py createsuperuser
    manage.py loaddata fixtures/goods/cats.json
    manage.py loaddata fixtures/goods/prod.json

29. Change all ocurrences 

30. pypi.org  - Збірка бібліотек для Python

31. django debug toolbar

    pip install django-debug-toolbar

    https://django-debug-toolbar.readthedocs.io/.

    debug_toolbar in INSTALLED_APPS

    urlpatterns = [
    
    path("__debug__/", include("debug_toolbar.urls")),
    
]

32. manage.py debugsqlshell

    from goods.models import Products

    Products.objects.all() - вибрати всі

    Products.filter(id=2) - відбір

    Products.objects.order_by('price') - сортування від меншого до більшого

    Products.objects.order_by('-price') - сортування від більшого до меншого

 33. Field loocups

    id__gt :  Більш чим
    id__gte:  Більше або дорівнює
    id__lt:   Менше ніж
    id__lte:  Менше або дорівнює
    id__sratswith: Регістр починається з

    AND and

    OR




-------------------------------------------------------------
manage.py debugsqlshell
from goods.models import Products
Products.objects.filter(price__lt=300).order_by('price')
Products.objects.filter(price__lt=300) & Products.objects.filter(price__gt=100)

Products.objects.filter(price__lt=300).filter(price__gt=100).order_by("-price")


Фільтр  по категорії
Products.objects.filter(category__id=5)


фільр по slug
Products.objects.filter(category__slug="kuhnya").order_by("price")


exists()

alt + enter



-------------------------------------------------------------










----------------------------------------------------

06 : 18 : 23

----------------------------------------------------





